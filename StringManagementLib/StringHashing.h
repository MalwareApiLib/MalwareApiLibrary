#pragma once



#ifndef _STRINGHASHING_H
#define _STRINGHASHING_H

#include <Windows.h>
#include "StringManagment.h"

//------------------------------------------------------------------------------------------------------------------------------------
typedef struct Djb2 {
	ULONG Hash;
	INT   Seed;
};

struct Djb2 Djb2HashStringStruct = { 0 };

VOID InitializeDjb2HashStringStruct(ULONG Hash, INT Seed) {
	Djb2HashStringStruct.Hash = Hash;
	Djb2HashStringStruct.Seed = Seed;
}

DWORD HashStringDjb2A(PCHAR String);
DWORD HashStringDjb2W(PWCHAR String);

//------------------------------------------------------------------------------------------------------------------------------------
typedef struct Variant1a {
	ULONG Hash1;
	ULONG Hash2;
};

struct Variant1a Variant1aHashStringStruct = { 0 };

VOID InitializeVariant1aHashStringStruct(ULONG Hash1, ULONG Hash2) {
	Variant1aHashStringStruct.Hash1 = Hash1;
	Variant1aHashStringStruct.Hash2 = Hash2;
}

ULONG HashStringFowlerNollVoVariant1aA(PCHAR String);
ULONG HashStringFowlerNollVoVariant1aW(PWCHAR String);

//------------------------------------------------------------------------------------------------------------------------------------

typedef struct Jenkins {
	INT rNb1;
	INT rNb2;
	INT rNb3;
	INT rNb4;
	INT rNb5;
};


struct Jenkins JenkinsHashStringStruct = { 0 };

VOID InitializeJenkinsHashStringStruct(INT rNb1, INT rNb2, INT rNb3, INT rNb4, INT rNb5) {
	JenkinsHashStringStruct.rNb1 = rNb1;
	JenkinsHashStringStruct.rNb2 = rNb2;
	JenkinsHashStringStruct.rNb3 = rNb3;
	JenkinsHashStringStruct.rNb4 = rNb4;
	JenkinsHashStringStruct.rNb5 = rNb5;
}

UINT32 HashStringJenkinsOneAtATime32BitA(PCHAR String);
UINT32 HashStringJenkinsOneAtATime32BitW(PWCHAR String);


//------------------------------------------------------------------------------------------------------------------------------------

DWORD HashStringLoseLoseA(PCHAR String);
DWORD HashStringLoseLoseW(PWCHAR String);

//------------------------------------------------------------------------------------------------------------------------------------

INT HashStringRotr32A(PCHAR String, INT Seed);
INT HashStringRotr32W(PWCHAR String, INT Seed);

//------------------------------------------------------------------------------------------------------------------------------------

typedef struct Sdbm {
	INT rNb1;
	INT rNb2;
};

struct Sdbm SdbmHashStringStruct = { 0 };

VOID InitializeSdbmHashStringStruct(INT rNb1, INT rNb2) {
	SdbmHashStringStruct.rNb1 = rNb1;
	SdbmHashStringStruct.rNb2 = rNb2;

}

DWORD HashStringSdbmA(PCHAR String);
DWORD HashStringSdbmW(PWCHAR String);

//------------------------------------------------------------------------------------------------------------------------------------


typedef struct FastHash {
	INT rNb1;
	INT rNb2;
	INT rNb3;
	INT rNb4;
	INT rNb5;
	INT rNb6;
	INT rNb7;
	INT rNb8;
	INT rNb9;
	INT rNbA;
	INT rNbB;
};

struct FastHash FastHashStringStruct = { 0 };

VOID InitializeFastHashStringStruct(INT rNb1, INT rNb2, INT rNb3, INT rNb4) {
	FastHashStringStruct.rNb1 = CreatePseudoRandomInteger();
	InitializeRandomPseudoIntStruct(rNb1, NULL, NULL);
	FastHashStringStruct.rNb2 = CreatePseudoRandomInteger();
	FastHashStringStruct.rNb3 = CreatePseudoRandomInteger();
	FastHashStringStruct.rNb4 = CreatePseudoRandomInteger();
	InitializeRandomPseudoIntStruct(rNb2, NULL, NULL);
	FastHashStringStruct.rNb5 = CreatePseudoRandomInteger();
	FastHashStringStruct.rNb6 = CreatePseudoRandomInteger();
	InitializeRandomPseudoIntStruct(rNb2+2, NULL, NULL);
	FastHashStringStruct.rNb7 = CreatePseudoRandomInteger();
	InitializeRandomPseudoIntStruct(rNb3, NULL, NULL);
	FastHashStringStruct.rNb8 = CreatePseudoRandomInteger();
	FastHashStringStruct.rNb9 = CreatePseudoRandomInteger();
	InitializeRandomPseudoIntStruct(rNb3 + 2, NULL, NULL);
	FastHashStringStruct.rNbA = CreatePseudoRandomInteger();
	InitializeRandomPseudoIntStruct(rNb4, NULL, NULL);
	FastHashStringStruct.rNbB = CreatePseudoRandomInteger();
}


UINT32 HashStringSuperFastHashA(PCHAR String);
UINT32 HashStringSuperFastHashW(PWCHAR String);

//------------------------------------------------------------------------------------------------------------------------------------


typedef struct GenericHash {
	INT rNb1;
	INT rNb2;
};

struct GenericHash GenericHashStringStruct = { 0 };

VOID InitializeGenericHashStringStruct(INT rNb1, INT rNb2) {
	GenericHashStringStruct.rNb1 = rNb1;
	GenericHashStringStruct.rNb2 = rNb2;
}

INT HashStringUnknownGenericHash1A(PCHAR String);
INT HashStringUnknownGenericHash1W(PWCHAR String);

//------------------------------------------------------------------------------------------------------------------------------------







#endif // !_STRINGHASHING_H
