/*
		
		ALL FUNCTIONS HERE ARE EXPORTED

*/


#pragma once


#ifndef _STRINGMANAGMENT_H
#define _STRINGMANAGMENT_H

#include <Windows.h>



//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\
//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\

// https://docs.microsoft.com/en-us/windows/win32/api/subauth/ns-subauth-unicode_string

//#define UNICODESTRING
#if !defined (UNICODESTRING)
typedef struct _UNICODE_STRING {
	USHORT Length;
	USHORT MaximumLength;
	PWSTR  Buffer;
} UNICODE_STRING, * PUNICODE_STRING;

#endif
//------------------------------------------------------------------------------------------------------------------------------------

PCHAR  CaplockStringA(PCHAR Ptr);
PWCHAR CaplockStringW(PWCHAR Ptr);

//------------------------------------------------------------------------------------------------------------------------------------

PCHAR  SecureStringCopyA(PCHAR String1, LPCSTR String2, SIZE_T Size);
PWCHAR SecureStringCopyW(PWCHAR String1, LPCWSTR String2, SIZE_T Size);

//------------------------------------------------------------------------------------------------------------------------------------

INT StringCompareA(LPCSTR String1, LPCSTR String2);
INT StringCompareW(LPCWSTR String1, LPCWSTR String2);

//------------------------------------------------------------------------------------------------------------------------------------

PWCHAR StringConcatW(PWCHAR String, PWCHAR String2);
PCHAR  StringConcatA(PCHAR String, PCHAR String2);

//------------------------------------------------------------------------------------------------------------------------------------

PCHAR  StringCopyA(PCHAR String1, PCHAR String2);
PWCHAR StringCopyW(PWCHAR String1, PWCHAR String2);

//------------------------------------------------------------------------------------------------------------------------------------

INT StringCompareStringRegionA(PCHAR String1, PCHAR String2, SIZE_T Count);
INT StringCompareStringRegionW(PWCHAR String1, PWCHAR String2, SIZE_T Count);

//------------------------------------------------------------------------------------------------------------------------------------

PCHAR  StringFindSubstringA(PCHAR String1, PCHAR String2);
PWCHAR StringFindSubstringW(PWCHAR String1, PWCHAR String2);

//------------------------------------------------------------------------------------------------------------------------------------

SIZE_T StringLengthA(LPCSTR String);
SIZE_T StringLengthW(LPCWSTR String);

//------------------------------------------------------------------------------------------------------------------------------------

PCHAR  StringLocateCharA(PCHAR String, INT Character);
PWCHAR StringLocateCharW(PWCHAR String, INT Character);

//------------------------------------------------------------------------------------------------------------------------------------

PCHAR  StringRemoveSubstringA(PCHAR String, CONST PCHAR Substring);
PWCHAR StringRemoveSubstringW(PWCHAR String, CONST PWCHAR Substring);

//------------------------------------------------------------------------------------------------------------------------------------

PCHAR  StringTerminateStringAtCharA(PCHAR String, INT Character);
PWCHAR StringTerminateStringAtCharW(PWCHAR String, INT Character);

//------------------------------------------------------------------------------------------------------------------------------------

PCHAR  StringTokenA(PCHAR String, CONST PCHAR Delim);
PWCHAR StringTokenW(PWCHAR String, CONST PWCHAR Delim);

//------------------------------------------------------------------------------------------------------------------------------------

VOID RtlInitEmptyUnicodeString(PUNICODE_STRING UnicodeString, PWCHAR Buffer, USHORT BufferSize);
VOID RtlInitUnicodeString(PUNICODE_STRING DestinationString, PCWSTR SourceString);

//------------------------------------------------------------------------------------------------------------------------------------

VOID CharArrayToByteArrayA(PCHAR Char, PBYTE Byte, DWORD Length);
VOID CharArrayToByteArrayW(PWCHAR Char, PBYTE Byte, DWORD Length);

//------------------------------------------------------------------------------------------------------------------------------------

SIZE_T CharStringToWCharString(PWCHAR Destination, PCHAR Source, SIZE_T MaximumAllowed);
SIZE_T WCharStringToCharString(PCHAR Destination, PWCHAR Source, SIZE_T MaximumAllowed);

//------------------------------------------------------------------------------------------------------------------------------------

DWORD DecimalToAsciiA(PCHAR String, LPDWORD dwArray, DWORD dwLength);
DWORD DecimalToAsciiW(PWCHAR String, LPDWORD dwArray, DWORD dwLength);

//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\
//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\

VOID InitializeRandomPseudoIntStruct(ULONG Seed, INT rNb10d, INT rNb5d);
INT CreatePseudoRandomInteger(VOID);

//------------------------------------------------------------------------------------------------------------------------------------

PWCHAR CreatePseudoRandomStringW(SIZE_T dwLength);
PCHAR  CreatePseudoRandomStringA(SIZE_T dwLength);

//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\
//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\

VOID  InitializeDjb2HashStringStruct(ULONG Hash, INT Seed);
DWORD HashStringDjb2A(PCHAR String);
DWORD HashStringDjb2W(PWCHAR String);

//------------------------------------------------------------------------------------------------------------------------------------

VOID  InitializeVariant1aHashStringStruct(ULONG Hash1, ULONG Hash2);
ULONG HashStringFowlerNollVoVariant1aA(PCHAR String);
ULONG HashStringFowlerNollVoVariant1aW(PWCHAR String);

//------------------------------------------------------------------------------------------------------------------------------------

VOID	InitializeJenkinsHashStringStruct(INT rNb1, INT rNb2, INT rNb3, INT rNb4, INT rNb5);
UINT32	HashStringJenkinsOneAtATime32BitA(PCHAR String);
UINT32	HashStringJenkinsOneAtATime32BitW(PWCHAR String);

//------------------------------------------------------------------------------------------------------------------------------------

DWORD HashStringLoseLoseA(PCHAR String);
DWORD HashStringLoseLoseW(PWCHAR String);

//------------------------------------------------------------------------------------------------------------------------------------

INT HashStringRotr32A(PCHAR String, INT Seed);
INT HashStringRotr32W(PWCHAR String, INT Seed);

//------------------------------------------------------------------------------------------------------------------------------------

VOID  InitializeSdbmHashStringStruct(INT rNb1, INT rNb2);
DWORD HashStringSdbmA(PCHAR String);
DWORD HashStringSdbmW(PWCHAR String);

//------------------------------------------------------------------------------------------------------------------------------------

VOID InitializeFastHashStringStruct(INT rNb1, INT rNb2, INT rNb3, INT rNb4);
UINT32 HashStringSuperFastHashA(PCHAR String);
UINT32 HashStringSuperFastHashW(PWCHAR String);

//------------------------------------------------------------------------------------------------------------------------------------

VOID InitializeGenericHashStringStruct(INT rNb1, INT rNb2);
INT HashStringUnknownGenericHash1A(PCHAR String);
INT HashStringUnknownGenericHash1W(PWCHAR String);


//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\
//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\



#endif // !_STRINGMANAGMENT_H
