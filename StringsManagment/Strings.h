#pragma once


#ifndef _STRINGS_H
#define _STRINGS_H

#include <Windows.h>
#include "StringManagment.h"

//------------------------------------------------------------------------------------------------------------------------------------
// https://docs.microsoft.com/en-us/windows/win32/api/subauth/ns-subauth-unicode_string

#ifndef _STRINGMANAGMENT_H
typedef struct _UNICODE_STRING {
	USHORT Length;
	USHORT MaximumLength;
	PWSTR  Buffer;
} UNICODE_STRING, * PUNICODE_STRING;

#endif // !_STRINGMANAGMENT_H


//------------------------------------------------------------------------------------------------------------------------------------

PCHAR  CaplockStringA(PCHAR Ptr);
PWCHAR CaplockStringW(PWCHAR Ptr);

//------------------------------------------------------------------------------

PCHAR  SecureStringCopyA(PCHAR String1, LPCSTR String2, SIZE_T Size);
PWCHAR SecureStringCopyW(PWCHAR String1, LPCWSTR String2, SIZE_T Size);

//------------------------------------------------------------------------------

INT StringCompareA(LPCSTR String1, LPCSTR String2);
INT StringCompareW(LPCWSTR String1, LPCWSTR String2);

//------------------------------------------------------------------------------

PWCHAR StringConcatW(PWCHAR String, PWCHAR String2);
PCHAR  StringConcatA(PCHAR String, PCHAR String2);

//------------------------------------------------------------------------------

PCHAR  StringCopyA(PCHAR String1, PCHAR String2);
PWCHAR StringCopyW(PWCHAR String1, PWCHAR String2);

//------------------------------------------------------------------------------

INT StringCompareStringRegionA(PCHAR String1, PCHAR String2, SIZE_T Count);
INT StringCompareStringRegionW(PWCHAR String1, PWCHAR String2, SIZE_T Count);

//------------------------------------------------------------------------------

PCHAR  StringFindSubstringA(PCHAR String1, PCHAR String2);
PWCHAR StringFindSubstringW(PWCHAR String1, PWCHAR String2);

//------------------------------------------------------------------------------

SIZE_T StringLengthA(LPCSTR String);
SIZE_T StringLengthW(LPCWSTR String);

//------------------------------------------------------------------------------

PCHAR  StringLocateCharA(PCHAR String, INT Character);
PWCHAR StringLocateCharW(PWCHAR String, INT Character);

//------------------------------------------------------------------------------

PVOID RfCopyMemory(PVOID Destination, CONST PVOID Source, SIZE_T Length);

PCHAR  StringRemoveSubstringA(PCHAR String, CONST PCHAR Substring);
PWCHAR StringRemoveSubstringW(PWCHAR String, CONST PWCHAR Substring);

//------------------------------------------------------------------------------

PCHAR  StringTerminateStringAtCharA(PCHAR String, INT Character);
PWCHAR StringTerminateStringAtCharW(PWCHAR String, INT Character);

//------------------------------------------------------------------------------

PCHAR  StringTokenA(PCHAR String, CONST PCHAR Delim);
PWCHAR StringTokenW(PWCHAR String, CONST PWCHAR Delim);

//------------------------------------------------------------------------------

VOID RtlInitEmptyUnicodeString(PUNICODE_STRING UnicodeString, PWCHAR Buffer, USHORT BufferSize);
VOID RtlInitUnicodeString(PUNICODE_STRING DestinationString, PCWSTR SourceString);

//------------------------------------------------------------------------------

VOID CharArrayToByteArrayA(PCHAR Char, PBYTE Byte, DWORD Length);
VOID CharArrayToByteArrayW(PWCHAR Char, PBYTE Byte, DWORD Length);

//------------------------------------------------------------------------------

SIZE_T CharStringToWCharString(PWCHAR Destination, PCHAR Source, SIZE_T MaximumAllowed);
SIZE_T WCharStringToCharString(PCHAR Destination, PWCHAR Source, SIZE_T MaximumAllowed);

//------------------------------------------------------------------------------

DWORD DecimalToAsciiA(PCHAR String, LPDWORD dwArray, DWORD dwLength);
DWORD DecimalToAsciiW(PWCHAR String, LPDWORD dwArray, DWORD dwLength);

//------------------------------------------------------------------------------------------------------------------------------------

#endif // !_STRINGS_H
